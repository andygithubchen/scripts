#! /usr/bin/python

# 命令行翻译脚本

import re;
import urllib;
import urllib2;
import sys;

def debug():
    xml = open("word.xml").read();
    print get_text(xml);
    print get_elements_by_path(xml, "custom-translation/content");
    #print_translations(xml, False, False);

def get_elements_by_path(xml, elem):
    if type(xml) == type(''):
        xml = [xml];
    if type(elem) == type(''):
        elem = elem.split('/');
    if (len(xml) == 0):
        return [];
    elif (len(elem) == 0):
        return xml;
    elif (len(elem) == 1):
        result = [];
        for item in xml:
            result += get_elements(item, elem[0]);
        return result;
    else:
        subitems = [];
        for item in xml:
            subitems += get_elements(item, elem[0]);
        return get_elements_by_path(subitems, elem[1:]);

textre = re.compile("<\!\[CDATA\[(.*?)\]\]", re.DOTALL);
def get_text(xml):
    #print 10*"..."+"\n"
    match = re.search(textre, xml);
    if not match:
        return xml;
    #print 40*"..."
    #print match
    #print 40*"..."
    return match.group(1);

def get_elements(xml, elem):
    p = re.compile("<" + elem + ">" + "(.*?)</" + elem + ">", re.DOTALL);
    it = p.finditer(xml);
    result = [];
    for m in it:
        result.append(m.group(1));
    return result;

GREEN = "\033[1;32m";
DEFAULT = "\033[0;49m";
BOLD = "\033[1m";
UNDERLINE = "\033[4m";
NORMAL = "\033[m";
RED = "\033[1;31m"

def crawl_xml(queryword):
    return urllib2.urlopen("http://dict.yodao.com/search?keyfrom=dict.python&q=" + urllib.quote_plus(queryword) + "&xmlDetail=true&doctype=xml").read();

def print_translations(xml, with_color, detailed):
    original_query = get_elements(xml, "original-query");
    queryword = get_text(original_query[0]);
    phonetic = get_elements(xml, "phonetic-symbol");
    phonetic = get_text(phonetic[0]);
    print '+-------------------------------------------------------+'
    print '| ' + BOLD + UNDERLINE + queryword + NORMAL+ '['+phonetic+']';
    translated = False;

    custom_translations = get_elements(xml, "custom-translation");
    for cus in custom_translations:
        source = get_elements_by_path(cus, "source/name");

        print '| ' + RED + "Translations from " + source[0] + DEFAULT;
        contents = get_elements_by_path(cus, "translation/content");
        if with_color:
            for content in contents[0:5]:
                print '|  ' + GREEN + get_text(content) + DEFAULT;
        else:
            for content in contents[0:5]:
                print '|  ' + get_text(content);
        translated = True;
    yodao_translations = get_elements(xml, "yodao-web-dict");
    printed = False;
    for trans in yodao_translations:
        webtrans = get_elements(trans, "web-translation");
        for web in webtrans[0:5]:
            if not printed:
                print '| ' + RED + "Translations from youdao" + DEFAULT;
                printed = True;
                keys = get_elements(web, "key");
            key = keys[0].strip();
            values = get_elements_by_path(web, "trans/value");
            value = values[0].strip();
            if with_color:
                print '|  ' + BOLD +  get_text(key) + ":\t" +DEFAULT + GREEN + get_text(value) + NORMAL;
            else:
                print '|  ' + get_text(value);

    yodao_translations = get_elements(xml, "example-sentences");
    printed = False;
    for trans in yodao_translations:
        webtrans = get_elements(trans, "sentence-pair");
        i = 0;
        for web in webtrans[0:5]:
            i += 1;
            if not printed:
                print '| ' + RED + "Example:" + DEFAULT;
                printed = True;
            values = get_elements_by_path(web, "sentence");
            value = values[0].strip();
            translation = get_elements_by_path(web, "sentence-translation");
            translation= translation[0].strip();
            translation= get_text(translation);
            content = get_text(value);
            re_h = re.compile('</?\w+[^>]*>');
            content = re_h.sub('',content);
            if with_color:
                print '| ' , i , DEFAULT + GREEN + content + NORMAL;
                print '|    ' + translation;
            else:
                print '| ' , i , content;
                print '|     ' + translation;

    print '+-------------------------------------------------------+'

def usage():
    print "usage: dict.py word_to_translate";

def main(argv):
    if len(argv) <= 0:
        usage();
        #debug();
        sys.exit(1);
    xml = crawl_xml("".join(argv));
    #print_translations(xml, True, False);
    print_translations(xml, True, True);
    #print_translations(xml, False, False);

if __name__ == "__main__":
    main(sys.argv[1:]);
